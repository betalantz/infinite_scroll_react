{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","hasMore","isLoading","page","photos","loadUsers","_this2","refs","myscroll","addEventListener","scrollTop","clientHeight","scrollHeight","console","log","_this3","encodedToken","btoa","unescape","encodeURIComponent","setState","request","get","concat","set","then","results","nextPhotos","body","result","map","photo","id","title","url","length","toConsumableArray","catch","err","message","_this$state","react_default","a","createElement","className","ref","style","height","overflow","react","key","display","alt","src","borderRadius","margin","width","marginTop","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAuHeA,qBAlHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAO,EACPC,SAAS,EACTC,WAAW,EACXC,KAAM,EACNC,OAAQ,IAPOZ,oFAWjBG,KAAKU,wDAGa,IAAAC,EAAAX,KAElBA,KAAKY,KAAKC,SAASC,iBAAiB,SAAU,WAE1CH,EAAKC,KAAKC,SAASE,UAAYJ,EAAKC,KAAKC,SAASG,cAClDL,EAAKC,KAAKC,SAASI,eAAiBN,EAAKP,MAAMG,YAE/CI,EAAKD,YACLQ,QAAQC,IAAI,wGAKN,IAAAC,EAAApB,KACJqB,EAAeC,KAAKC,SAASC,mBAAmB,2CACtDxB,KAAKyB,SAAS,CAAElB,WAAW,GAAQ,WACjCmB,IACGC,IADH,+CAAAC,OACsDR,EAAKhB,MAAMI,OAC9DqB,IAAI,gBAAiB,SAAWR,GAChCS,KAAK,SAACC,GAEL,IAAMC,EAAaD,EAAQE,KAAKC,OAAOC,IAAI,SAAAC,GAAK,MAAK,CACnDC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbC,IAAKH,EAAMG,OAIbnB,EAAKK,SAAS,CACZnB,QAAUc,EAAKhB,MAAMK,OAAO+B,OAAS,IACrCjC,WAAW,EACXC,KAAMY,EAAKhB,MAAMI,KAAO,EACxBC,OAAM,GAAAmB,OAAA9B,OAAA2C,EAAA,EAAA3C,CACDsB,EAAKhB,MAAMK,QADVX,OAAA2C,EAAA,EAAA3C,CAEDkC,MAGPd,QAAQC,IAAI,+DAAgEC,EAAKhB,MAAMI,QAExFkC,MAAM,SAACC,GACNvB,EAAKK,SAAS,CACZpB,MAAOsC,EAAIC,QACXrC,WAAW,yCAOnBW,QAAQC,IAAI,aADL,IAAA0B,EAOH7C,KAAKI,MAJPC,EAHKwC,EAGLxC,MACAC,EAJKuC,EAILvC,QACAC,EALKsC,EAKLtC,UACAE,EANKoC,EAMLpC,OAEF,OACEqC,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVC,IAAI,WACJC,MAAO,CAAEC,OAAQ,QAASC,SAAU,SAEnC5C,EAAO0B,IAAI,SAAAC,GAAK,OACfU,EAAAC,EAAAC,cAACM,EAAA,SAAD,CAAUC,IAAKnB,EAAMC,IACnBS,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEK,QAAS,SACrBV,EAAAC,EAAAC,cAAA,OACES,IAAKrB,EAAME,MACXoB,IAAKtB,EAAMG,IACXY,MAAO,CACLQ,aAAc,OACdP,OAAQ,IACRQ,OAAQ,GACRC,MAAO,OAGXf,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEU,MAAO,MACnBf,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAAEW,UAAW,IAAxB,aACa1B,EAAMC,IAEnBS,EAAAC,EAAAC,cAAA,sBAAcZ,EAAME,YAK3BjC,GACCyC,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEY,MAAO,SAClB1D,GAGJE,GACCuC,EAAAC,EAAAC,cAAA,0BAEA1C,GACAwC,EAAAC,EAAAC,cAAA,uDA5GQgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.f050ee80.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport request from \"superagent\"\nimport \"./App.css\";\n    \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      hasMore: true,\n      isLoading: false,\n      page: 1,\n      photos: []\n    };\n  }\n  componentWillMount() {\n    this.loadUsers()\n  }\n\n  componentDidMount() {\n    // Detect when scrolled to bottom.\n    this.refs.myscroll.addEventListener(\"scroll\", () => {\n      if (\n        this.refs.myscroll.scrollTop + this.refs.myscroll.clientHeight >=\n        this.refs.myscroll.scrollHeight && !this.state.isLoading\n      ) {\n        this.loadUsers();\n        console.log('loadUsers() called from event listener in componentDidMount()');\n      }\n    });\n  }\n\n  loadUsers() {\n    const encodedToken = btoa(unescape(encodeURIComponent('4iPxzSjRbGsHBVWMm8nq5KG_ooiYlxvkvfkm:')))\n    this.setState({ isLoading: true }, () => {\n      request\n        .get(`https://gorest.co.in/public-api/photos?page=${this.state.page}`)\n        .set('Authorization', 'Basic ' + encodedToken)\n        .then((results) => {\n          // Creates a massaged array of photo data\n          const nextPhotos = results.body.result.map(photo => ({\n            id: photo.id,\n            title: photo.title,\n            url: photo.url,\n          }));\n\n          // Merges the next photos into our existing photos\n          this.setState({\n            hasMore: (this.state.photos.length < 100),\n            isLoading: false,\n            page: this.state.page + 1,\n            photos: [\n              ...this.state.photos,\n              ...nextPhotos,\n            ],\n          });\n          console.log('Current page number set when promise resolved from API call:', this.state.page);\n        })\n        .catch((err) => {\n          this.setState({\n            error: err.message,\n            isLoading: false,\n            });\n        })\n    });\n  }\n\n  render() {\n    console.log(\"re-render\");\n    const {\n      error,\n      hasMore,\n      isLoading,\n      photos,\n    } = this.state;\n    return (\n      <div\n        className=\"App\"\n        ref=\"myscroll\"\n        style={{ height: \"500px\", overflow: \"auto\" }}\n      >\n        {photos.map(photo => (\n          <Fragment key={photo.id}>\n            <div style={{ display: 'flex' }}>\n              <img\n                alt={photo.title}\n                src={photo.url}\n                style={{\n                  borderRadius: '10px',\n                  height: 100,\n                  margin: 20,\n                  width: 100,\n                }}\n              />\n              <div style={{ width: 200 }}>\n                <h5 style={{ marginTop: 0 }}>\n                  Photo No. {photo.id}\n                </h5>\n                <h6>Caption: {photo.title}</h6>\n              </div>\n            </div>\n          </Fragment>\n        ))}\n        {error &&\n          <div style={{ color: '#900' }}>\n            {error}\n          </div>\n        }\n        {isLoading &&\n          <div>Loading...</div>\n        }\n        {!hasMore &&\n          <div>You did it! You reached the end!</div>\n        }\n      </div>\n    );\n  }\n}\n    \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}